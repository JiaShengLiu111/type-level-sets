This library provides type-level sets to Haskell, with a value level counterpart, and operations for taking the union, computing
subsets, and split sets. Also included is a "mapping" type constructor that pairs symbols with types. This can be used to represent
sets of variable-type pairs, which is used in the paper "Embedding effect systems in Haskell" (Dominic Orchard, 
Tomas Petricek <http://www.cl.cam.ac.uk/~dao29/publ/haskell14-effects.pdf>) to embed effect sets. 

The following shows an example: 

	{-# LANGUAGE DataKinds, TypeOperators #-}

	import Data.Type.Set

	foo :: Set '["x" :-> Int, "z" :-> Int, "w" :-> Int]
	foo = Ext ((Var :: (Var "x")) :-> 2) $
	       Ext ((Var :: (Var "z")) :-> 4) $
	        Ext ((Var :: (Var "w")) :-> 5) $
	         Empty 

	bar :: Set '["y" :-> Int, "w" :-> Int]
	bar = Ext ((Var :: (Var "y")) :-> 3) $
       	      	  Ext ((Var :: (Var "w")) :-> 1) $
	               Empty 

	-- foobar :: Set '["w" :-> Int, "x" :-> Int, "y" :-> Int, "z" :-> Int]
	foobar = foo `union` bar

The 'Set' type for 'foobar' here shows the normalised form (sorted with no duplicates).
The type signatures is commented out as it can be infered. Running the example we get:

	*Main> foobar	
	{(Var :-> 1), (Var :-> 2), (Var :-> 3), (Var :-> 4)}

Thus, we see that the first value paired with the "w" variable is dropped.



